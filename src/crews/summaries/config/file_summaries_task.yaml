summarize_chunk:
  description: >-
    code_chunk:
    ```{code_chunk}```

    ------------------------------------------------------------

    Task:
    Based on the provided chunked file contents, generate one JSON object per
    source file (exclude `__init__.py`). Use ONLY the provided JSON structure.

    Requirements:
      - Prioritize: purpose, responsibilities, inputs/outputs, public APIs
        (relevant signatures), invariants, dependencies, patterns, use cases,
        and suggested test criteria.
      - Maintain semantic focus and keep it compact; do not repeat large code
        blocks (only minimal code in examples when helpful).

    Rules:
      - Return compact JSON (minified; no extra spaces or newlines).

    First, think through the necessary logic and data. Then, in a second step, generate only the JSON object.

  expected_output: >-
    Output JSON:
      {
        "location": "import route of the file (e.g. 'project.module.file')",
        "purpose": "Detailed but concise description of the file's primary purpose",
        "dependencies": {
          "internal": [{"path": "module_1.py", "reason": "Why it is used"}],
          "external": [{"name": "external_library", "purpose": "What for"}]
        },
        "structure": {
          "classes": [{
            "name": "ClassName",
            "responsibility": "What it is responsible for",
            "attributes": [{"name": "attribute_1", "type": "Type"}],
            "methods": [{
              "name": "method_1",
              "signature": "method_1(args)",
              "description": "Detailed but concise description",
              "parameters": [{"name": "param_1", "type": "Type"}],
              "returns": {"type": "Type", "description": "Short Description"},
              "raises": [{"exception": "Exception", "description": "Short Description"}]
            }]
          }],
          "functions": [{
            "name": "function_name",
            "signature": "function_name(args)",
            "purpose": "Detailed but concise description",
            "parameters": [{"name": "param_1", "type": "Type"}],
            "returns": {"type": "Type", "description": "Short Description"},
            "raises": [{"exception": "Exception", "description": "Short Description"}]
          }],
          "globals": [{"name": "IMPORTANT_VARIABLE", "value": "Value if simple", "purpose": "Short Purpose"}]
        },
        "examples": [{"language": "python", "code": "# Typical usage example\nresult = example_function(param)"}]
      }
    Return only valid JSON. Do not add prose outside JSON.
  agent: summarizer
