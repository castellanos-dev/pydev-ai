generate_code:
  description: >
    Using the build plan, generate the python code for the project.
    The file contents should be ready to be written to disk.
    Keep the code simple and concise. The code should be production-ready and well-structured.
    The code should be written in a way that is easy to understand and maintain. Do not include unnecessary comments.
    The code should be efficient and performant.
    Do not include tests or documentation.

    For code files:
      1. Follow the established PEP8 style guide for Python
      2. Include minimal but effective docstrings
      3. Ensure code is production-ready, well-structured and efficient
      4. Include appropriate error handling

    Strictly follow the project design:
    `{project_design}`
  expected_output: >
    Output JSON format:
    {'root': [{
      "path": str,
      "content": str
    }]}
    Use compact language. Do not add prose outside JSON.
  agent: code_generator

code_review:
  description: >
    Review the codebase and report identified issues. Only output issues to be fixed.

    Issues to report:

      - Incorrect code implementation
      - Incorrect code duplication
      - Incorrect code performance
      - Incorrect code security
      - Docstring existence on public APIs and correctness

    Details:

      - file_path: The path to the file to review.
      - affected_callable: The callable that is affected by the issue. "project.module.class",
        "project.module.class.method" or "project.module.function". Do not include callable that are
        not part of the project.
      - importance: The importance of the issue. 1 is the lowest importance and 3 is the highest importance.
      - points: The implementation effort of the issue. 1 is the lowest effort and 3 is the highest effort.
      - description: The description of the issue. Concise and to the point.
      - fix: The fix for the issue. Prose action plan to fix the issue. Concise and to the point. The scope
        of the fix can not be more than the involved callable. Auxiliary functions are allowed only if
        extremely necessary.

    DESIRED:
      - Avoid reporting irrelevant issues.

    COMPULSORY:
      - Do NOT analyze issues in the __init__.py files.
      - Focus on unit issues, do not analyze the project design.
      - Do NOT report docstring issues on private APIs.

    The result can be empty.
  expected_output: >
    Output JSON format:
    [{
      "file_path": str,
      "affected_callable": str,
      "importance": int,
      "points": int,
      "description": str,
      "fix": str
    }]
    Use compact language. Do not add prose outside JSON.
  agent: reviewer
  context:
    - generate_code

debug_if_needed:
  description: >
    Given the code issues and the code, propose minimal corrective patches.
    The code should be production-ready and well-structured. Do not include unnecessary comments.
    The code should be efficient and performant. Do not include tests or documentation.
    Follow the code issues fix description.

    For code files:
      1. Follow the established PEP8 style guide for Python
      2. Include minimal but effective docstrings
      3. Ensure code is production-ready, well-structured and efficient
      4. Include appropriate error handling

    Details:
      - file_path: The path to the file to fix.
      - affected_callable: The callable that is affected by the issue. "project.module.class",
        "project.module.class.method" or "project.module.function". Do not include callable that are
        not part of the project.
      - fix: The code required to fix the issue. The scope of the fix can not be more than the
        involved callable. Auxiliary functions are allowed only if extremely necessary.

    COMPULSORY:
      - The output JSON must have the same length as the input JSON. The output can be empty.
      - Each output fix should map a input fix.
  expected_output: >
    Output JSON format:
    {'root': [{
      "file_path": str,
      "affected_callable": str,
      "fix": str
    }]}
    Use compact language. Do not add prose outside JSON.
  agent: debugger
  context:
    - code_review
    - generate_code
